{"version":3,"sources":["components/navigationBar/navigationBar.tsx","services/requestHandler.tsx","components/search/search.tsx","components/picturesGrid/picturesGrid.tsx","controllers/imageController.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavigationBar","className","AppBar","position","Typography","variant","React","RequestHandler","root","progressCallback","client_id","request","method","resource","self","Promise","fullfill","reject","xhr","XMLHttpRequest","url","open","onprogress","e","onreadystatechange","this","readyState","status","responseText","send","response","result","JSON","parse","success","message","data","Search","props","saveSearchTerms","setState","tags","state","newChipKeyCodes","helperText","defaultValue","onChange","Fab","color","aria-label","onClick","searchImages","PicturesGrid","picturesUrls","GridList","cols","cellHeight","map","item","iterator","GridListTile","key","src","animationDuration","prevProps","ImageController","requestHandler","a","get","page","join","images","results","imagesToShow","urls","small","App","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ce60779.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Typography } from '@material-ui/core';\r\nimport './navigationBar.scss';\r\n\r\nexport class NavigationBar extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div className='navigation_bar'>\r\n                <AppBar position='static'>\r\n                    <Typography variant='h6'>\r\n                    Unsplash API demo\r\n                    </Typography>\r\n                </AppBar>\r\n            </div>\r\n        )\r\n    }\r\n}","export class RequestHandler {\r\n    root: string = \"\";\r\n    client_id: string = \"8f10f55811fdcb3293b111fc3398c25e6c5a0323d672721ebb0459e8ecc12831\";\r\n    \r\n    progressCallback: Function = () => {};\r\n\r\n    constructor(root: string | undefined, progressCallback?: Function) {\r\n        if (root) {\r\n            this.root = root;\r\n        } \r\n        \r\n        if (progressCallback) {\r\n            this.progressCallback = progressCallback;\r\n        }\r\n    }\r\n\r\n    private request = (method: string, resource: string): Promise<any> => {\r\n        let self = this;\r\n\r\n        return new Promise(function(fullfill, reject) {\r\n            let xhr = new XMLHttpRequest();\r\n            let url = self.root + resource;\r\n            xhr.open(method, url, true);\r\n            if (self.progressCallback) {\r\n                xhr.onprogress = function(e: ProgressEvent) {\r\n                    self.progressCallback(e);\r\n                };\r\n            }\r\n            xhr.onreadystatechange = function() {\r\n                if (this.readyState === 4) {\r\n                    if (this.status === 200) {\r\n                        fullfill(xhr.responseText);\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send();\r\n        });\r\n    };\r\n    \r\n    async get(resource: string): Promise<any> {\r\n        let result: any;\r\n        try {\r\n            let response = await this.request(\"GET\", resource);\r\n            result = JSON.parse(response);\r\n            return result;\r\n        } catch {\r\n            result = {\r\n                success: false,\r\n                message: \"GET request failed\",\r\n                data: null\r\n            };\r\n            return result;\r\n        }\r\n    }\r\n}","import * as React from \"react\";\r\nimport ChipInput from 'material-ui-chip-input';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\r\nimport './search.scss';\r\n\r\ninterface ISearchProps {\r\n    searchImages: Function\r\n}\r\n\r\ninterface ISearchState {\r\n    tags: string[]\r\n}\r\nexport default class Search extends React.PureComponent<ISearchProps, ISearchState> {\r\n    constructor(props: Readonly<ISearchProps>) {\r\n        super(props);\r\n        this.state = {\r\n            tags: ['summer', 'beach']\r\n        };\r\n    }\r\n\r\n    saveSearchTerms = (data: string[]) => {\r\n        this.setState({tags: data});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div className='search_component'>\r\n            <ChipInput \r\n                newChipKeyCodes = {[32, 13]}\r\n                helperText = \"Type tags to search for images\" \r\n                defaultValue={['summer', 'beach']}\r\n                onChange = {(data) => { this.saveSearchTerms(data)} }/>\r\n                <Fab \r\n                    variant=\"extended\" \r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick = {() => { this.props.searchImages(this.state.tags) }}>\r\n                        <ImageSearchIcon />\r\n                    Search\r\n                </Fab>\r\n        </div>);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Image from 'material-ui-image';\r\nimport './picturesGrid.scss';\r\n\r\ninterface IPictureGridProps {\r\n    picturesUrls: string[]\r\n}\r\n\r\ninterface IPictureGridSate {\r\n    picturesUrls: string[]\r\n}\r\n\r\nexport default class PicturesGrid extends React.PureComponent<IPictureGridProps, IPictureGridSate> {\r\n    constructor(props: IPictureGridProps) {\r\n        super(props);\r\n        this.state = {\r\n            picturesUrls: this.props.picturesUrls\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div className='search_results'>\r\n            <GridList cols={3} cellHeight={330}>\r\n                {this.state.picturesUrls.map((item, iterator) => (\r\n                <GridListTile key={iterator}>\r\n                    <Image \r\n                        src={item}\r\n                        animationDuration={5000}/>\r\n                </GridListTile>))}\r\n            </GridList>\r\n        </div>);\r\n    };\r\n\r\n    componentDidUpdate(prevProps: IPictureGridProps) {\r\n        if (this.props.picturesUrls[0] !== prevProps.picturesUrls[0])\r\n        {\r\n            this.setState({ picturesUrls: this.props.picturesUrls })\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { RequestHandler } from '../services/requestHandler';\r\nimport Search from '../components/search/search';\r\nimport IUnsplashImage from '../interfaces/image';\r\nimport PicturesGrid from '../components/picturesGrid/picturesGrid';\r\n\r\ninterface IImageControllerState {\r\n    page: number,\r\n    imagesToShow: string[]\r\n}\r\nexport default class ImageController extends React.PureComponent<{}, IImageControllerState> {\r\n    requestHandler: RequestHandler = new RequestHandler(\"https://api.unsplash.com/\");\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n        this.state = { \r\n            page: 1,\r\n            imagesToShow: []\r\n        };\r\n    }\r\n\r\n    searchImages = async (tags: string[]) => {\r\n        let images: Array<IUnsplashImage> = (await this.requestHandler.get(\"search/photos?page=\"+ this.state.page + \r\n                                                         \"&query=\" + tags.join(',') + \r\n                                                         \"&client_id=\" + this.requestHandler.client_id + \r\n                                                         \"&per_page=12\")).results as Array<IUnsplashImage>;\r\n        this.setState({\r\n            imagesToShow: images.map(item => item.urls.small)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div>\r\n            <Search searchImages={ this.searchImages }/>\r\n            <PicturesGrid picturesUrls={ this.state.imagesToShow} />\r\n        </div>)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.searchImages(['summer', 'beach']);\r\n    }\r\n}","import React from 'react';\r\nimport { NavigationBar } from './components/navigationBar/navigationBar';\r\nimport ImageController from './controllers/imageController';\r\n\r\nexport default class App extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavigationBar />\r\n        <ImageController />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'typeface-roboto';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}